#+title: Codex

# Include additional CSS styles. Sadly the readtheorg theme does not appear to
# come bundled with Haskell syntax colors, so we have to generate these ourselves.
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="syntax-highlighting.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />

# Set default header argument for all source code blocks. The "no-export" means
# that we do not expand noweb references when exporting (weaving) --- the fact
# that this is not the default option is odd.
#+PROPERTY: header-args :noweb no-export

# Number the top 5 levels of headings; since h1 is the title, this means headings
# up to 4 numbers --- e.g., "1.2.3.4".
#+OPTIONS: H:5

#+BIBLIOGRAPHY: ./citations.bib

* Introduction

This project aims to capture my notes for studying various programming problems (data structures and algorithms).

* Layout

Every problem gets its own =.org= file. The solutions are all in Python. All solutions are "standalone" in that none of them use any libraries other than what's provided by Python's standard libraries.

Below is a table of every problem, with tags that give a brief description of each one.

| Name   | Tags    |
|--------+---------|
| [[file:problem/parity/README.org][Parity]] | bitwise |

* Houskeeping and boilerplate

** Org mode HTML export

#+include: "build-literate.org" :lines "16-"

** Development environment (Nix shell)

This is taken from https://github.com/tweag/haskell-stack-nix-example/blob/b9383e35416a2b0e21fbc97ed079538f9f395b6a/shell.nix#L1.

Note that we first have to do =nix-shell --pure= in Mool's toplevel directory, then =cd= into =moolc= and only from here we are able to do =stack exec -- ghci= to see the right version of GHC.

This is the main development shell and brings in all of our dependencies to build all of our code. It's great for development and testing things out (e.g., running unit tests) for all of the various languages we use.

#+name: Main development shell
#+caption: =shell.nix=
#+begin_src nix :tangle shell.nix :eval no
let
  # Nixpkgs snapshot.
  sources = import ./package/nix/sources.nix;
  # The final "pkgs" attribute with all the bells and whistles of our overlays.
  pkgs = import sources.nixpkgs {};
in

# This is our development shell.
pkgs.mkShell ({
  buildInputs = [
    # Tangling and weaving for Literate Programming.
    pkgs.emacs
    pkgs.inkscape
    pkgs.pdf2svg

    # Misc
    pkgs.git

    pkgs.python39Packages.hypothesis
  ];
})
#+end_src

** gitignore

#+begin_src gitignore :tangle .gitignore :eval no
**/__pycache__
**/*.auctex-auto
**/*.html
**/*.hypothesis
#+end_src

* References
#+CITE_EXPORT: csl ~/prog/codex/deps/styles/apa.csl
#+PRINT_BIBLIOGRAPHY:
