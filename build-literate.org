#+title: Literate Programming Build System
#+PROPERTY: header-args :noweb no-export

We use [[https://github.com/listx/lilac][Lilac]] for literate programming. To build everything just run =make
shell= to drop inside the development environment shell then run =make= inside
it.

* Weaving (generating the docs)

#+name: Makefile
#+caption: Makefile
#+begin_src makefile :eval no :tangle Makefile
PROJ_ROOT := $(shell git rev-parse --show-toplevel)
LILAC_ROOT := $(PROJ_ROOT)/deps/elisp/lilac
PROCS := $(shell nproc)
define run_emacs
	LILAC_ROOT=$(LILAC_ROOT) emacs $(2) --quick --batch --kill \
		--load $(LILAC_ROOT)/lilac.el \
		--load $(PROJ_ROOT)/codex.el \
		--eval="$(1)"
endef
define run_emacs_nobatch
	LILAC_ROOT=$(LILAC_ROOT) emacs $(2) --quick --kill \
		--load $(LILAC_ROOT)/lilac.el \
		--load $(PROJ_ROOT)/codex.el \
		--eval="$(1)"
endef
src_problem = $(shell find problem/ -type f -name 'README.org')
woven_html = \
	$(patsubst \
		problem/%/README.org, \
		problem/%/README.html, \
		$(src_problem)) \
	appendix/mathematics/README.html \
	appendix/python_tricks/README.html \
	README.html
problem_dirs = $(shell find problem -maxdepth 1 -type d | sort | tail -n+2)
problem_dirs_without_prefix = $(subst problem/,,$(problem_dirs))
test_dirs = $(shell find . -type f -name '__init__.py' \
		| sed 's|/__init__.py||')
# All problem dirs with Tikz-generated images.
image_dirs = $(shell find . -type f -name 'images.org' \
		| sed -e 's|/[^/]*$$||' -e 's|^problem/||' | sort -u)
all_tests_verified = $(patsubst %.py, %.py.verified, \
		$(shell find . -type f -name 'test.py'))

define weave_org

$(1): $(2) build-literate.org \
		$(shell find $(3) -type f -name 'images.org' \
			| xargs grep 'img.pdf' \
			| sed \
				-e 's|images.org:#+header: :file ||' \
				-e 's|.img.pdf|.svg|')
	@echo weaving $(2)
	$(call run_emacs,(lilac-publish),$(2))

endef

all: check.verified weave
.PHONY: all

__NREF__Makefile-tangle

weave: $(woven_html)
	touch weave

README.html: build-literate.org README.org citations.bib
	$(call run_emacs,(lilac-publish),README.org)

$(foreach d,$(problem_dirs_without_prefix),\
	$(eval $(call weave_org,\
	problem/$(d)/README.html,\
	problem/$(d)/README.org,problem)))

appendix/mathematics/README.html: appendix/mathematics/README.org \
		appendix/mathematics/twos-complement.org
	$(call run_emacs,(lilac-publish),appendix/mathematics/README.org)

appendix/python_tricks/README.html: appendix/python_tricks/README.org
	$(call run_emacs,(lilac-publish),appendix/python_tricks/README.org)

check.verified: lint.verified test
	touch check.verified

test: $(all_tests_verified)
	touch test

lint.verified: \
		mypy.verified \
		ruff.verified \
		spellcheck.verified \
		linelength.verified \
		linkcheck.verified
	touch lint.verified

mypy.verified: $(all_tests_verified)
	mypy problem appendix
	touch mypy.verified

ruff.verified: $(all_tests_verified)
	ruff problem appendix
	touch ruff.verified

__NREF__Makefile-spellcheck

__NREF__Makefile-linelength

__NREF__Makefile-linkcheck

# Enter development environment.
shell:
	nix-shell --pure

__NREF__Makefile-update-deps
#+end_src

** Use =lilac.theme= file

First we track Lilac as a submodule within this project, and then symlink to the
CSS, JS, and theme files to the project root. Symlinking adds a level of
indirection such that if we ever decide to move around the submodule location to
somewhere else, we won't have to update all of our Org files and can instead
just update these symlinks.

Then in all of our published Org files, we do

#+begin_src org
#+SETUPFILE: path/to/lilac.theme
#+end_src

to get the CSS/JS that comes with Lilac.

** Custom CSS and HTML <head> content

We tweak Lilac's default CSS a bit.

Make all HTML files we generate try to pull in a local file called
=codex.css=, as well as a custom font.

#+name: __NREF__codex-html-head
#+begin_src emacs-lisp
; See https://stackoverflow.com/a/27285582/437583.
(setq lilac-html-head
      (concat
       "<link rel=\"stylesheet\" type=\"text/css\" href=\"codex.css\" />\n"
       "<link rel=\"stylesheet\" href="
        "\"https://fonts.googleapis.com/css2"
        "?family=Bungee+Shade:wght@400"
       "\">"
       ))
#+end_src

*** Main CSS file

The default =codex.css= file has some miscellaneous customizations.

#+name: codex.css
#+caption: codex.css
#+begin_src css :tangle codex.css
__NREF__codex-css-title-font
__NREF__codex-css-tables
#+end_src

**** Title font

This makes the title font bigger and uses a more ornate font for it.

#+name: __NREF__codex-css-title-font
#+begin_src css
h1.title {
    font-family: "Bungee Shade", serif;
    font-size: 100pt;
}
@media (any-pointer: coarse) {
    h1.title {
        font-family: "Bungee Shade", serif;
        font-size: 60pt;
    }
}
#+end_src

**** Tables

#+name: __NREF__codex-css-tables
#+begin_src css
table.monospace-except-header {
    font-family: monospace;
}

table.monospace-except-header thead {
    font-family: var(--font-serif);
}
#+end_src

*** Secondary CSS file

This is a second CSS file where we customize the title text of the pages for the
problems. We just (manually) create a symlink from the problem page's
=codex.css= to this one (because we don't want to use the regular =codex.css=
from above).

#+name: codex.problems.css
#+caption: codex.problems.css
#+begin_src css :tangle codex.problem.css
h1.title {
    font-family: "Source Serif Pro", serif;
}
__NREF__codex-css-tables
#+end_src

** Ignore woven HTML from =git diff=

Typically we only need to look at the rendered HTML output in a web browser as
the raw HTML diff output is extremely difficult to parse as a human. So by
default we ask Git to exclude it from =git diff= by treating them as binary
data.

#+name: .gitattributes
#+caption: .gitattributes
#+begin_src gitattributes :eval no :tangle .gitattributes
,* -diff
,**/*.org diff
,**/.gitattributes diff
,**/.gitmodules diff
,**/.gitignore diff
COPYRIGHT diff
LICENSE diff
#+end_src

In order to still show the HTML textual diff, we can run =git diff --text=.

*** =git add -p=

Note that the above setting to treat HTML files as binary data prevents them
from being considered for =git add -p=. In order to add them, use =git add -u=
instead.

** gitignore

#+name: .gitignore
#+caption: .gitignore
#+begin_src gitignore :eval no :tangle .gitignore
,**/__pycache__
,**/*.auctex-auto
,**/*.hypothesis
,**/*.pdf
,**/*.log
,**/*.py.verified
check.verified
lint.verified
linkcheck.verified
linelength.verified
mypy.verified
ruff.verified
spellcheck.verified
test
update-deps
weave
#+end_src

* Tangling (generating the source code)

Tangling is simply the act of collecting the =#+begin_src ... #+end_src= blocks
and arranging them into the various target (source code) files. Every source
code block is given a unique name.

We simply tangle all major =*.org= files in the toplevel Makefile.

#+name: __NREF__Makefile-tangle
#+begin_src makefile
build_literate_tangled = \
		.gitattributes \
		.gitignore \
		_typos.toml \
		codex.css \
		codex.problem.css \
		codex.el \
		Makefile \
		shell.nix
$(build_literate_tangled) &: build-literate.org
	$(call run_emacs,(org-babel-tangle),build-literate.org)
	touch $(build_literate_tangled)

citations.bib: README.org
	$(call run_emacs,(org-babel-tangle),README.org)
	touch citations.bib

define generate_img_pdfs
$(shell grep 'img.pdf' $(1) \
		| sed \
			-e 's|^|$(1):|' \
			-e 's|images.org:#+header: :file ||') &: $(1)
	@echo generating images from $(1)
	$(call run_emacs,(org-html-export-to-html),$(1))
	rm -f $(patsubst %/images.org, %/images.html, $(1))
endef

define generate_img_svgs
$(1:.img.pdf=.svg): $(1)
	@echo generating svg from $(1)
	@echo $(shell pwd)
	pdf2svg $(1) $(1).uncropped.svg
	inkscape \
		--export-plain-svg \
		--export-margin=5 \
		--export-filename=$(1:.img.pdf=.svg) \
		--export-area-drawing \
		$(1).uncropped.svg
	rm $(1).uncropped.svg
endef

$(foreach p,$(image_dirs),\
	$(eval $(call generate_img_pdfs,\
	$(p)/images.org)))

all_img_pdfs = $(shell find . -type f -name 'images.org' \
		| xargs grep 'img.pdf' \
		| sed 's|images.org:#+header: :file ||')
$(foreach img,$(all_img_pdfs),\
	$(eval $(call generate_img_svgs,\
	$(img))))

define tangle_tests
$(1)/__init__.py $(1)/test.py &: $(1)/README.org
	@echo tangling $(1)/README.org
	$(call run_emacs,(org-babel-tangle),$(1)/README.org)
	find $(1) -type f -name '*.py' \
		-execdir sed -i 's/[[:blank:]]*$$$$//' {} +
endef

# See https://stackoverflow.com/a/9694782/437583.
$(foreach d,$(test_dirs),\
	$(eval $(call tangle_tests,$(d))))

define verify_tests
$(1)/test.py.verified: $(1)/test.py
	python -m unittest discover \
		--failfast --start-directory $(1) \
		--top $(shell echo $(1) | sed -e 's|./||' -e 's|/.\+||')
	touch $(1)/test.py.verified
endef

$(foreach d,$(test_dirs),\
	$(eval $(call verify_tests,$(d))))
#+end_src

* Linting

** Spell checker

We use [[https://github.com/crate-ci/typos][typos-cli]] to check for spelling errors. Below we configure it to only
check the original source material --- Org files.

#+name: _typos.toml
#+caption: _typos.toml
#+begin_src toml :eval no :tangle _typos.toml
[files]
extend-exclude = [
    "*.html",
    "deps/*",
]
#+end_src

Here we have the Makefile rules for linting, which include this spellchecker.

#+name: __NREF__Makefile-spellcheck
#+begin_src makefile
ORG_FILES = $(shell find . -type f -name '*.org')

spellcheck.verified: $(ORG_FILES)
	typos
	touch spellcheck.verified
#+end_src

** Detect long lines

For code we tangle, we want lines to be roughly 80 characters. This limit is
actually a bit difficult to enforce because sometimes the source code blocks we
edit get placed into an indented location, and from the source code block itself
we cannot tell how much this indentation is exactly. So set the maximum line
length for tangled text to be 90 characters.

We have to wrap the =find ...= invocation with =|| true= because =xargs= will
exit with =123= if the last =grep= call can't find a match. That is, in our case
not finding a match is a *good* thing but the inner =grep= doesn't know that.

This code detects which files to look at by looking at lines in Org files that
start with =#+begin_src= and end with =:tangle foo=, where =foo= is the last
word in the line.

#+name: __NREF__Makefile-linelength
#+begin_src makefile
linelength.verified: $(ORG_FILES)
	`find . -type f -name '*.org' \
		| grep -v '^./deps' \
		| xargs grep '^#+begin_src.\+ :tangle ' \
		| sed 's,[^/]\+.org.\+:tangle ,,' \
		| grep -v citations.bib \
		| xargs grep -n '^.\{90\}' > linelength_offenders.log` || true
	test `wc --bytes linelength_offenders.log | cut -d\  -f1` -eq 0
	touch linelength.verified
#+end_src

** Link checker

#+name: __NREF__Makefile-linkcheck
#+begin_src makefile
HTML_FILES = $(shell find . -type f -name '*.html' | grep -v '^./deps')

linkcheck.verified: $(HTML_FILES)
	lychee --offline $(HTML_FILES)
	touch linkcheck.verified
#+end_src

* Development environment (Nix shell)

This is taken from https://github.com/tweag/haskell-stack-nix-example/blob/b9383e35416a2b0e21fbc97ed079538f9f395b6a/shell.nix#L1.

This is the main development shell and brings in all of our dependencies to
build all of our code. It's great for development and testing things out (such
as running "make" to re-run any Python tests that have been updated when adding
new problems).

#+name: shell.nix
#+caption: shell.nix
#+begin_src nix :eval no :tangle shell.nix
let
  # Nixpkgs snapshot.
  sources = import ./package/nix/sources.nix;
  # The final "pkgs" attribute with all the bells and whistles of our overlays.
  pkgs = import sources.nixpkgs {};
  # This minimalist latex setup is adapted from https://nixos.wiki/wiki/TexLive.
  tex_for_orgmode = (pkgs.texlive.combine {
    # Start with scheme-basic.
    inherit (pkgs.texlive) scheme-basic
      # Add in additional TeX packages (think CTAN package names).
      wrapfig amsmath ulem hyperref capt-of

      # TikZ.
      pgf
      xkeyval
      fontspec

      # Source Sans Pro font.
      sourcesanspro
      # Source Code Pro font.
      sourcecodepro
      ;
  });

in

# This is our development shell.
pkgs.mkShell ({
  buildInputs = [
    # Tangling and weaving for Literate Programming.
    pkgs.emacs29-nox

    # Diagrams.
    pkgs.inkscape
    pkgs.pdf2svg
    tex_for_orgmode

    # Misc
    pkgs.git
    pkgs.less

    # Update deps (bootstrap).
    pkgs.niv
    pkgs.nix
    pkgs.cacert

    # Spell checking.
    pkgs.typos

    # Link checker.
    pkgs.lychee

    # Python testing and linting.
    pkgs.python39Packages.hypothesis
    pkgs.python39Packages.mypy
    pkgs.ruff
  ];
})
#+end_src

** Update Nix dependencies

This is based on Lilac's own code for updating Nix dependencies with [[https://github.com/nmattia/niv][=niv=]].

#+name: __NREF__Makefile-update-deps
#+begin_src makefile
nixpkgs_stable_channel := nixos-23.05
update-deps: package/nix/sources.json package/nix/sources.nix
	cd package && niv update nixpkgs --branch $(nixpkgs_stable_channel)
	cd package && niv update
	touch update-deps
#+end_src

* Elisp

#+name: codex.el
#+caption: codex.el
#+begin_src emacs-lisp :eval no :tangle codex.el
(setq org-cite-csl-styles-dir
      (concat (getenv "LILAC_ROOT") "/deps/styles/"))

(setq org-latex-pdf-process
  '("lualatex --shell-escape --interaction nonstopmode --output-directory=%o %f"))

__NREF__codex-html-head
#+end_src
